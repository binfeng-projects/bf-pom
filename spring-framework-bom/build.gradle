import groovy.util.Node

plugins {
	id 'io.freefair.aspectj' version '8.4' apply false
	// kotlinVersion is managed in gradle.properties
	id 'org.jetbrains.kotlin.plugin.serialization' version "${kotlinVersion}" apply false
	id 'org.jetbrains.dokka' version '1.8.20'
	id 'org.unbroken-dome.xjc' version '2.0.0' apply false
	id 'com.github.ben-manes.versions' version '0.49.0'
	id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
	id 'de.undercouch.download' version '5.4.0'
	id 'me.champeau.jmh' version '0.7.2' apply false
	id 'me.champeau.mrjar' version '0.1.1'
}

ext {
	moduleProjects = subprojects.findAll { it.name.startsWith("spring-") }
	javaProjects = subprojects.findAll { !it.name.startsWith("framework-") }
}

description = "Spring Framework"

configure(allprojects) { project ->
	apply plugin: "org.springframework.build.localdev"
	group = "org.springframework"
	repositories {
		mavenCentral()
		maven {
			url "https://repo.spring.io/milestone"
			content {
				// Netty 5 optional support
				includeGroup 'io.projectreactor.netty'
			}
		}
		if (version.contains('-')) {
			maven { url "https://repo.spring.io/milestone" }
		}
		if (version.endsWith('-SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}
	configurations.all {
		resolutionStrategy {
			cacheChangingModulesFor 0, "seconds"
			cacheDynamicVersionsFor 0, "seconds"
		}
	}
}

configure(allprojects - project(":framework-platform")) {
	configurations {
		dependencyManagement {
			canBeConsumed = false
			canBeResolved = false
			visible = false
		}
		matching { it.name.endsWith("Classpath") }.all { it.extendsFrom(dependencyManagement) }
	}
	dependencies {
		dependencyManagement(enforcedPlatform(dependencies.project(path: ":framework-platform")))
	}
}

configure([rootProject] + javaProjects) { project ->
	apply plugin: "java"
	apply plugin: "java-test-fixtures"
	apply plugin: 'org.springframework.build.conventions'
	apply from: "${rootDir}/gradle/toolchains.gradle"
	apply from: "${rootDir}/gradle/ide.gradle"

	dependencies {
		testImplementation("org.junit.jupiter:junit-jupiter-api")
		testImplementation("org.junit.jupiter:junit-jupiter-params")
		testImplementation("org.junit.platform:junit-platform-suite-api")
		testImplementation("org.mockito:mockito-core")
		testImplementation("org.mockito:mockito-junit-jupiter")
		testImplementation("io.mockk:mockk")
		testImplementation("org.assertj:assertj-core")
		// Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
		testRuntimeOnly("org.junit.platform:junit-platform-launcher")
		testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")
		testRuntimeOnly("org.apache.logging.log4j:log4j-core")
		testRuntimeOnly("org.apache.logging.log4j:log4j-jul")
		testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl")
		// JSR-305 only used for non-required meta-annotations
		compileOnly("com.google.code.findbugs:jsr305")
		testCompileOnly("com.google.code.findbugs:jsr305")
	}

	ext.javadocLinks = [
			"https://docs.oracle.com/en/java/javase/17/docs/api/",
			"https://jakarta.ee/specifications/platform/9/apidocs/",
			"https://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/",  // CommonJ and weblogic.* packages
			"https://www.ibm.com/docs/api/v1/content/SSEQTP_8.5.5/com.ibm.websphere.javadoc.doc/web/apidocs/", // com.ibm.*
			"https://docs.jboss.org/jbossas/javadoc/4.0.5/connector/", // org.jboss.resource.*
			"https://docs.jboss.org/hibernate/orm/5.6/javadocs/",
			"https://eclipse.dev/aspectj/doc/released/aspectj5rt-api",
			"https://www.quartz-scheduler.org/api/2.3.0/",
			"https://fasterxml.github.io/jackson-core/javadoc/2.14/",
			"https://fasterxml.github.io/jackson-databind/javadoc/2.14/",
			"https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.14/",
			"https://hc.apache.org/httpcomponents-client-5.2.x/current/httpclient5/apidocs/",
			"https://projectreactor.io/docs/test/release/api/",
			"https://junit.org/junit4/javadoc/4.13.2/",
			// TODO Uncomment link to JUnit 5 docs once we execute Gradle with Java 18+.
			// See https://github.com/spring-projects/spring-framework/issues/27497
			//
			// "https://junit.org/junit5/docs/5.10.1/api/",
			"https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
			//"https://javadoc.io/static/io.rsocket/rsocket-core/1.1.1/",
			"https://r2dbc.io/spec/1.0.0.RELEASE/api/",
			// Previously there could be a split-package issue between JSR250 and JSR305 javax.annotation packages,
			// but since 6.0 JSR 250 annotations such as @Resource and @PostConstruct have been replaced by their
			// JakartaEE equivalents in the jakarta.annotation package.
			//"https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/"
	] as String[]
}

configure(moduleProjects) { project ->
	apply from: "${rootDir}/gradle/spring-module.gradle"
}


//def myFrameworkVersion = "0.0.8-SNAPSHOT"
def excludedNodes = ['developers','licenses','name','description','url','scm','organization','issueManagement','groupId','version','dependencyManagement']
def excludedProjects = ['framework-api','framework-platform','framework-bom','framework-docs','integration-tests']
def excludedCoreTestProjects = ['spring-core','spring-core-test','spring-jcl','spring-aspects']
def excludedMetaProjects = []
subprojects { subproject ->
	if (!excludedProjects.contains(subproject.name)) {
		model {
			tasks.generatePomFileForCustomMavenPublication {
				destination = file("$projectDir/pom.xml")
			}
		}
		apply plugin: 'maven-publish'
		apply plugin: 'java'
		publishing {
			publications {
				customMaven(MavenPublication) {
					from components.java
					// 在这里自定义生成的 POM 文件内容
					pom.withXml {
						def root = asNode()
						//添加parent标签
						Node parentNode = new Node(null,"parent")
						parentNode.appendNode('groupId', project.getParent().group)
						parentNode.appendNode('artifactId',project.getParent().name)
						parentNode.appendNode('version', "\${revision}")
						//这句是为了挪动位置
						root.children().add(0,parentNode)
						Node moduleNode = null
						if(childProjects != null && !childProjects.isEmpty()) {
							moduleNode = root.appendNode("modules")
							for (Map.Entry<String,Project> projectEntry : childProjects.entrySet()) {
								if (excludedProjects.contains(projectEntry.getKey())) {
									continue
								}
								moduleNode.appendNode('module',projectEntry.getKey())
							}
							root.children().add(1,new Node(null,"packaging","pom"))
//							if(project.name == 'spring-boot-project' && moduleNode != null) {
//								moduleNode.appendNode('module',"spring-boot-dependencies")
//							}

						}
						for (String nodeName : excludedNodes) { //移除dependency之外的其他无关元素
							if (root[nodeName]) {
								root.remove(root[nodeName])
							}
						}
						Node deps = root.dependencies[0] ?: root.appendNode("dependencies")
						try {
							def optionalConfiguration = project.configurations.getByName('optional')
							if(optionalConfiguration) {
								optionalConfiguration.dependencies.each { dep ->
									def dependencyNode = deps.appendNode('dependency')
									dependencyNode.appendNode('groupId', dep.group)
									dependencyNode.appendNode('artifactId', dep.name)
									//没有version
									//dependencyNode.appendNode('version', dep.version)
									dependencyNode.appendNode('optional', true)
								}
							}
						} catch (Exception e) {

						}
						if(!excludedCoreTestProjects.contains(subproject.name)) {
							def dependencyNode = deps.appendNode('dependency')
							dependencyNode.appendNode('groupId','org.springframework')
							dependencyNode.appendNode('artifactId', 'spring-core-test')
							dependencyNode.appendNode('optional', true)
						}
						if(subproject.name == 'spring-aspects') {
							Node pluginNode = new groovy.xml.XmlParser().parseText("""
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.14.0</version>
				<configuration>
					<complianceLevel>\${java.version}</complianceLevel>
					<source>\${java.version}</source>
					<target>\${java.version}</target>
					<showWeaveInfo>true</showWeaveInfo>
					<verbose>true</verbose>
					<Xlint>ignore</Xlint>
					<encoding>\${encoding}</encoding>
				</configuration>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>compile</goal>
<!--							<goal>test-compile</goal>-->
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.aspectj</groupId>
						<artifactId>aspectjtools</artifactId>
						<version>1.9.20</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
""")
							Node buildNode = root.appendNode("build")
							buildNode.append(pluginNode)
//							spring-aspects添加对spring-test的依赖
							def dependencyNode = deps.appendNode('dependency')
							dependencyNode.appendNode('groupId','org.springframework')
							dependencyNode.appendNode('artifactId', 'spring-test')
							dependencyNode.appendNode('optional', true)

						}
						for(Node dep : deps.children()) {
							if(dep.version && dep.groupId.text() == 'org.springframework') {
								dep.remove(dep.version)
							}
							if(dep.scope) {
								dep.remove(dep.scope)
							}
						}
						if(subproject.name == 'spring-oxm') {
							Node pluginNode = new groovy.xml.XmlParser().parseText("""
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<sources>\${project.basedir}/src/test/schema</sources>
					<packageName>org.springframework.oxm.jaxb.test</packageName>
					<outputDirectory>\${project.basedir}/src/test/generated</outputDirectory>
				</configuration>
			</plugin>
		</plugins>
""")
							Node buildNode = root.appendNode("build")
							buildNode.append(pluginNode)
//							spring-oxm添加对spring-context和spring-context-support的依赖
							def node1 = deps.appendNode('dependency')
							node1.appendNode('groupId','org.springframework')
							node1.appendNode('artifactId', 'spring-context')
							node1.appendNode('optional', true)
							def dependencyNode = deps.appendNode('dependency')
							dependencyNode.appendNode('groupId','org.springframework')
							dependencyNode.appendNode('artifactId', 'spring-context-support')
							dependencyNode.appendNode('optional', true)
						}
						if(subproject.name == 'spring-test') {
//							spring-test添加对spring-oxm的依赖
							def dependencyNode = deps.appendNode('dependency')
							dependencyNode.appendNode('groupId','org.springframework')
							dependencyNode.appendNode('artifactId', 'spring-oxm')
							dependencyNode.appendNode('optional', true)
						}
						if(subproject.name == 'spring-r2dbc' || subproject.name == 'spring-context-indexer') {
//							spring-test添加对spring-context的依赖
							def dependencyNode = deps.appendNode('dependency')
							dependencyNode.appendNode('groupId','org.springframework')
							dependencyNode.appendNode('artifactId', 'spring-context')
							dependencyNode.appendNode('optional', true)
						}
					}
				}
			}
		}
	} else if(subproject.name == 'framework-platform') {
		apply plugin: 'java-platform'
		apply plugin: 'maven-publish'
		publishing {
			publications {
				customMaven(MavenPublication) {
					artifactId = 'framework-platform'
					from components.javaPlatform
				}
			}
		}
	}
	if (excludedMetaProjects.contains(subproject.name)) {
		tasks.generateMetadataFileForCustomMavenPublication.enabled = false
	}
}
//subprojects { subproject ->
//	if (!excludedProjects.contains(subproject.name)) {
//		model {
//			tasks.generatePomFileForCustomMavenPublication {
//				destination = file("$projectDir/pom.xml")
//			}
//		}
//		apply plugin: 'java'
//		apply plugin: 'maven-publish'
//		//复用init
//		publishing {
//			publications {
//				customMaven(MavenPublication) {
//					from components.java
//					// 在这里自定义生成的 POM 文件内容
//					pom.withXml {
//						def root = asNode()
//						//添加parent标签
//						if(null != project.getParent()) {
//							Node parentNode = new Node(null,"parent")
//							parentNode.appendNode('groupId', project.getParent().group)
//							parentNode.appendNode('artifactId',project.getParent().name)
//							parentNode.appendNode('version', "\${revision}")
//							//这句是为了挪动位置
//							root.children().add(0,parentNode)
//						}
//						try {
//							def optionalConfiguration = project.configurations.getByName('optional')
//							if(optionalConfiguration) {
//								Node deps = root.dependencies[0] ?: root.appendNode("dependencies")
//								optionalConfiguration.dependencies.each { dep ->
//									def dependencyNode = deps.appendNode('dependency')
//									dependencyNode.appendNode('groupId', dep.group)
//									dependencyNode.appendNode('artifactId', dep.name)
//									//没有version
//									//dependencyNode.appendNode('version', dep.version)
//									dependencyNode.appendNode('optional', true)
//								}
//							}
//						} catch (Exception e) {
//
//						}
//						if(childProjects != null && !childProjects.isEmpty()) {
//							Node moduleNode = root.appendNode("modules")
//							for (Map.Entry<String,Project> projectEntry : childProjects.entrySet()) {
//								if (excludedProjects.contains(projectEntry.getKey())) {
//									continue
//								}
//								moduleNode.appendNode('module',projectEntry.getKey())
//							}
//						}
//						for (String nodeName : excludedNodes) { //移除dependency之外的其他无关元素
//							if (root[nodeName]) {
//								root.remove(root[nodeName])
//							}
//						}
//						root.dependencies
//								.dependency
//								.findAll { dep ->
//									// find all dependencies with runtime scope
//									dep.groupId.text() == 'org.springframework'
//								}
//								.each { dep ->
//									if(dep.version) {
//										dep.remove(dep.version)
//									}
//								}
//
//					}
//				}
//			}
//		}
//	} else {
//		if(subproject.name == 'spring-boot-dependencies') {
//		}
//	}
//	if (excludedMetaProjects.contains(subproject.name)) {
//		tasks.generateMetadataFileForCustomMavenPublication.enabled = false
//	}
//}
